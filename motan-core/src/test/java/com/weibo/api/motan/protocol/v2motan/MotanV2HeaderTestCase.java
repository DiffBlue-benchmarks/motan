package com.weibo.api.motan.protocol.v2motan;

import com.diffblue.deeptestutils.Reflector;
import com.weibo.api.motan.protocol.v2motan.MotanV2Header;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;

public class MotanV2HeaderTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: MotanV2Header */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 209 branch to line 209
   *  - conditional line 210 branch to line 210
   *  - conditional line 211 branch to line 211
   *  - conditional line 212 branch to line 212
   *  - conditional line 213 branch to line 213
   */

  @Test
  public void hashCodeOutputZero() throws InvocationTargetException {

    // Arrange
    MotanV2Header objectUnderTest = ((MotanV2Header)Reflector.getInstance(
        "com.weibo.api.motan.protocol.v2motan.MotanV2Header"));
    Reflector.setField(objectUnderTest, "serialize", 0);
    Reflector.setField(objectUnderTest, "heartbeat", true);
    Reflector.setField(objectUnderTest, "version", -202_194_596);
    Reflector.setField(objectUnderTest, "request", true);
    Reflector.setField(objectUnderTest, "requestId", 0L);
    Reflector.setField(objectUnderTest, "proxy", false);
    Reflector.setField(objectUnderTest, "gzip", false);
    Reflector.setField(objectUnderTest, "status", -1_301_322_105);
    Reflector.setField(objectUnderTest, "oneway", true);

    // Act
    int retval = objectUnderTest.hashCode();

    // Assert result
    Assert.assertEquals(0, retval);
  }
}

package com.weibo.api.motan.cluster.loadbalance;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.slf4j.Logger;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

@RunWith(PowerMockRunner.class)
public class ConfigurableWeightLoadBalance_SingleGroupHolderTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ConfigurableWeightLoadBalance */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 139 branch to line 140
   *  - conditional line 140 branch to line 140
   *  - conditional line 141 branch to line 141
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 143
   */
  @PrepareForTest({org.slf4j.LoggerFactory.class})
  @Test
  public void constructorInputNull0OutputVoid2()
      throws Exception, InvocationTargetException, InstantiationException, IllegalAccessException,
             NoSuchMethodException {

    // Setup mocks
    org.powermock.api.mockito.PowerMockito.mockStatic(org.slf4j.LoggerFactory.class);

    // Arrange
    com.weibo.api.motan.cluster.loadbalance.ConfigurableWeightLoadBalance this$0 = null;
    ArrayList list = new ArrayList();
    Logger logger7 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger6 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger5 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger4 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger3 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger2 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger1 = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    Logger logger = ((Logger)Reflector.getInstance("org.slf4j.Logger"));
    org.mockito.Mockito
        .when(org.slf4j.LoggerFactory.getLogger(org.mockito.AdditionalMatchers.or(
            org.mockito.Matchers.isA(String.class), org.mockito.Matchers.isNull(String.class))))
        .thenReturn(logger)
        .thenReturn(logger1)
        .thenReturn(logger2)
        .thenReturn(logger3)
        .thenReturn(logger4)
        .thenReturn(logger5)
        .thenReturn(logger6)
        .thenReturn(logger7);

    // Act, creating object to test constructor
    Class<?> c = Reflector.forName(
        "com.weibo.api.motan.cluster.loadbalance.ConfigurableWeightLoadBalance$SingleGroupHolder");
    Constructor<?> ctor = c.getDeclaredConstructor(
        Reflector.forName("com.weibo.api.motan.cluster.loadbalance.ConfigurableWeightLoadBalance"),
        Reflector.forName("java.util.List"));
    ctor.setAccessible(true);
    Object instance = ctor.newInstance(this$0, list);

    // Method returns void, testing that no exception is thrown
  }
}

package com.weibo.api.motan.transport.netty;

import com.diffblue.deeptestutils.Reflector;
import com.weibo.api.motan.codec.Codec;
import com.weibo.api.motan.transport.Channel;
import com.weibo.api.motan.transport.netty.NettyDecoder;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class NettyDecoderTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: NettyDecoder */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 81 branch to line 84
   *  - conditional line 91 branch to line 99
   *  - conditional line 99 branch to line 103
   *  - conditional line 104 branch to line 105
   *  - conditional line 106 branch to line 113
   *  - conditional line 116 branch to line 116
   */

  @Test
  public void decodev2InputNotNullNotNullNotNullOutputNull2()
      throws Exception, InvocationTargetException, NoSuchMethodException, IllegalAccessException {

    // Arrange
    NettyDecoder objectUnderTest =
        ((NettyDecoder)Reflector.getInstance("com.weibo.api.motan.transport.netty.NettyDecoder"));
    Reflector.setField(objectUnderTest, "maxContentLength", 9);
    Codec codec = ((Codec)org.mockito.Mockito.mock(Codec.class));
    org.mockito.Mockito
        .when(((com.weibo.api.motan.codec.Codec)codec)
                  .decode(
                      org.mockito.AdditionalMatchers.or(
                          org.mockito.Matchers.isA(com.weibo.api.motan.transport.Channel.class),
                          org.mockito.Matchers.isNull(com.weibo.api.motan.transport.Channel.class)),
                      org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(String.class),
                                                        org.mockito.Matchers.isNull(String.class)),
                      org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(byte[].class),
                                                        org.mockito.Matchers.isNull(byte[].class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "codec", codec);
    Channel channel1 = ((Channel)Reflector.getInstance("com.weibo.api.motan.transport.Channel"));
    Reflector.setField(objectUnderTest, "client", channel1);
    ChannelHandlerContext ctx = ((ChannelHandlerContext)Reflector.getInstance(
        "org.jboss.netty.channel.ChannelHandlerContext"));
    org.jboss.netty.channel.Channel channel =
        ((org.jboss.netty.channel.Channel)org.mockito.Mockito.mock(
            org.jboss.netty.channel.Channel.class));
    org.mockito.Mockito.when(((org.jboss.netty.channel.Channel)channel).getRemoteAddress())
        .thenReturn(null);
    ChannelBuffer buffer = ((ChannelBuffer)org.mockito.Mockito.mock(ChannelBuffer.class));
    org.mockito.Mockito.when(((org.jboss.netty.buffer.ChannelBuffer)buffer).readableBytes())
        .thenReturn(2_147_483_646)
        .thenReturn(5);
    org.mockito.Mockito.when(((org.jboss.netty.buffer.ChannelBuffer)buffer).readByte())
        .thenReturn((byte)0);
    org.mockito.Mockito.when(((org.jboss.netty.buffer.ChannelBuffer)buffer).readInt())
        .thenReturn(0)
        .thenReturn(0);
    org.mockito.Mockito.when(((org.jboss.netty.buffer.ChannelBuffer)buffer).readLong())
        .thenReturn(8L);

    // Act
    Class<?> c = Reflector.forName("com.weibo.api.motan.transport.netty.NettyDecoder");
    Method m = c.getDeclaredMethod(
        "decodev2", Reflector.forName("org.jboss.netty.channel.ChannelHandlerContext"),
        Reflector.forName("org.jboss.netty.channel.Channel"),
        Reflector.forName("org.jboss.netty.buffer.ChannelBuffer"));
    m.setAccessible(true);
    Object retval = (Object)m.invoke(objectUnderTest, ctx, channel, buffer);

    // Assert result
    Assert.assertEquals(null, retval);
  }
}

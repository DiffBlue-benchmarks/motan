package com.weibo.api.motan.transport.netty;

import com.diffblue.deeptestutils.Reflector;
import com.weibo.api.motan.rpc.DefaultResponse;
import com.weibo.api.motan.rpc.Request;
import com.weibo.api.motan.transport.MessageHandler;
import com.weibo.api.motan.transport.netty.NettyChannelHandler;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

@RunWith(PowerMockRunner.class)
public class NettyChannelHandlerTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: NettyChannelHandler */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 145 branch to line 148
   *  - conditional line 148 branch to line 148
   *  - conditional line 154 branch to line 157
   */
  @PrepareForTest({java.lang.System.class})
  @Test
  public void processRequestInputNotNullNotNullZeroOutputVoid3()
      throws Exception, NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Setup mocks
    org.powermock.api.mockito.PowerMockito.mockStatic(java.lang.System.class);

    // Arrange
    NettyChannelHandler objectUnderTest = ((NettyChannelHandler)Reflector.getInstance(
        "com.weibo.api.motan.transport.netty.NettyChannelHandler"));
    Reflector.setField(objectUnderTest, "threadPoolExecutor", null);
    Reflector.setField(objectUnderTest, "serverChannel", null);
    MessageHandler messageHandler =
        ((MessageHandler)org.mockito.Mockito.mock(MessageHandler.class));
    DefaultResponse defaultResponse =
        ((DefaultResponse)Reflector.getInstance("com.weibo.api.motan.rpc.DefaultResponse"));
    org.mockito.Mockito
        .when(((com.weibo.api.motan.transport.MessageHandler)messageHandler)
                  .handle(
                      org.mockito.AdditionalMatchers.or(
                          org.mockito.Matchers.isA(com.weibo.api.motan.transport.Channel.class),
                          org.mockito.Matchers.isNull(com.weibo.api.motan.transport.Channel.class)),
                      org.mockito.AdditionalMatchers.or(org.mockito.Matchers.isA(Object.class),
                                                        org.mockito.Matchers.isNull(Object.class))))
        .thenReturn(defaultResponse);
    Reflector.setField(objectUnderTest, "messageHandler", messageHandler);
    ChannelHandlerContext ctx =
        ((ChannelHandlerContext)org.mockito.Mockito.mock(ChannelHandlerContext.class));
    Channel channel = ((Channel)org.mockito.Mockito.mock(Channel.class));
    org.mockito.Mockito.when(((org.jboss.netty.channel.Channel)channel).isConnected())
        .thenReturn(false);
    org.mockito.Mockito.when(((org.jboss.netty.channel.ChannelHandlerContext)ctx).getChannel())
        .thenReturn(channel);
    Request request = ((Request)org.mockito.Mockito.mock(Request.class));
    org.mockito.Mockito.when(((com.weibo.api.motan.rpc.Request)request).getRequestId())
        .thenReturn(0L);
    long processStartTime = 0L;
    org.mockito.Mockito.when(System.currentTimeMillis()).thenReturn(1_515_585_600_000L);

    // Act
    Class<?> c = Reflector.forName("com.weibo.api.motan.transport.netty.NettyChannelHandler");
    Method m = c.getDeclaredMethod(
        "processRequest", Reflector.forName("org.jboss.netty.channel.ChannelHandlerContext"),
        Reflector.forName("com.weibo.api.motan.rpc.Request"), Reflector.forName("long"));
    m.setAccessible(true);
    m.invoke(objectUnderTest, ctx, request, processStartTime);

    // Method returns void, testing that no exception is thrown
  }
}
